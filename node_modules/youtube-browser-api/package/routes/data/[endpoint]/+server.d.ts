import type { API } from 'sveltekit-zero-api';
import { GetListByKeyword } from '../keyword';
import { GetChannelById } from '../../content/channel';
import { GetPlaylistData } from '../playlist';
import { GetSuggestData } from '../suggest';
import type { Param, Prettify } from '../../utility-types';
export type Union<T> = {
    [K2 in keyof T]: T[K2];
}[keyof T];
export type Params = Prettify<{
    playlist?: Param<typeof GetPlaylistData>;
    channel?: Param<typeof GetChannelById>;
    suggestion?: Param<typeof GetSuggestData>;
    search?: Param<typeof GetListByKeyword>;
}>;
export type Slug = keyof Params;
declare const get: (event: {
    query?: Prettify<Union<Params>>;
}) => Promise<({
    title: string;
    content: import("../types/initial-data").TabRendererContent | undefined;
} | undefined)[] | {
    items: import("../../types").ITEM[];
} | undefined>;
export declare const GET: (e: API<Param<typeof get>>) => Promise<{
    Ok: () => {
        body: ({
            title: string;
            content: import("../types/initial-data").TabRendererContent | undefined;
        } | undefined)[] | {
            items: import("../../types").ITEM[];
        } | undefined;
        status: 200;
        ok: true;
    };
} | {
    Success: () => {
        body: ({
            title: string;
            content: import("../types/initial-data").TabRendererContent | undefined;
        } | undefined)[] | {
            items: import("../../types").ITEM[];
        } | undefined;
        status: 200;
        ok: true;
    };
    Any: () => {
        body: ({
            title: string;
            content: import("../types/initial-data").TabRendererContent | undefined;
        } | undefined)[] | {
            items: import("../../types").ITEM[];
        } | undefined;
        status: 200;
        ok: true;
    };
}>;
export {};

export type Return<T extends (...args: any) => any> = {
    [key in keyof Partial<Awaited<ReturnType<T>>>]?: boolean;
};
type ValuesOf<T> = T[keyof T];
type ObjectValuesOf<T> = Exclude<Extract<ValuesOf<T>, object>, Array<any>>;
type NonObjectKeysOf<T> = {
    [K in keyof T]: T[K] extends Array<any> ? K : T[K] extends object ? never : K;
}[keyof T];
export type Flatten<T> = Pick<T, NonObjectKeysOf<T>> & UnionToIntersection<ObjectValuesOf<T>>;
export type DeepFlatten<T> = T extends any ? Pick<T, NonObjectKeysOf<T>> & UnionToIntersection<DeepFlatten<ObjectValuesOf<T>>> : never;
export type FirstFlatten<T> = Omit<DeepFlatten<T>, keyof T>;
export type Union<T> = {
    [K in keyof T]: {
        [K2 in K]: T[K2];
    };
}[keyof T];
export {};
